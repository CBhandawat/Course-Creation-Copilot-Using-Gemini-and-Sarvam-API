import streamlit as st
import re
from helpers import add_back_and_logout_button
from streamlit_extras.switch_page_button import switch_page
from pymongo import MongoClient  # Ensure you have pymongo installed for MongoDB interactions
import os

# Set up the Streamlit page configuration
st.set_page_config(page_title="Modules", initial_sidebar_state="collapsed")
st.markdown(
    """
<style>
    [data-testid="collapsedControl"] {
        display: none
    }
</style>
""",
    unsafe_allow_html=True,
)

def modules_page():
    st.title("Modules Overview")

    # Tabs to separate Automatic and Manual Modules
    auto_tab, manual_tab = st.tabs(["Automatic Modules", "Manual Modules"])

    # Connect to MongoDB (modify the URI as needed)
    client = MongoClient(os.getenv("MONGODB_URI"))
    db = client['course_copilot_db']
    gemini_modules_collection = db['gemini_modules']  # Collection for automatic modules
    modules_collection = db['course_modules']    # Collection for manual modules

    with auto_tab:
        st.header("Automatic Modules Generated by Gemini")
        user_id = st.session_state['user_id']
        
        # Load modules generated by Gemini for the user
        auto_modules_data = list(gemini_modules_collection.find({"user_id": user_id}))

        if len(auto_modules_data) == 0:
            st.warning("No automatic modules found. Please generate modules on the 'Course Creation' page.")
        else:
            auto_modules = {}
            for module in auto_modules_data:
                auto_modules[module['module_name']] = module['subtopics']

            if not auto_modules:
                st.warning("No modules parsed from the automatic generation.")
            else:
                for idx, (module_name, topics) in enumerate(auto_modules.items()):
                    st.subheader(f"{idx + 1}. {module_name}")
                    for topic in topics:
                        if st.button(f"{module_name} - {topic}", key=f"auto-{idx}-{topic}"):
                            st.session_state['SELECTED_TOPIC'] = topic
                            st.session_state['SELECTED_MODULE'] = module_name
                            st.success(f"Selected topic '{topic}' from module '{module_name}' for script and video generation.")

    # Display Manual Modules
    with manual_tab:
        st.header("Manual Modules Created by You")
        
        # Load manual modules created by the user
        manual_modules_data = list(modules_collection.find({"user_id": user_id}))

        if len(manual_modules_data) == 0:
            st.warning("No manual modules found. Please create modules on the 'Course Creation' page.")
        else:
            manual_modules = {}
            for module in manual_modules_data:
                manual_modules[module['module_name']] = module['subtopics']

            for idx, (module_name, topics) in enumerate(manual_modules.items()):
                st.subheader(f"{idx + 1}. {module_name}")
                for topic in topics:
                    if st.button(f"{module_name} - {topic}", key=f"manual-{idx}-{topic}"):
                        st.session_state['SELECTED_TOPIC'] = topic
                        st.session_state['SELECTED_MODULE'] = module_name
                        st.success(f"Selected topic '{topic}' from module '{module_name}' for script and video generation.")

    # Display Selected Module and Topic
    if st.button("Next"):
        if 'SELECTED_TOPIC' in st.session_state and 'SELECTED_MODULE' in st.session_state:
            switch_page("script_and_video_generation")

# Manage navigation history
current_page = "modules_page"

if current_page not in st.session_state['page_history']:
    st.session_state['page_history'].append(current_page)

# Add the Back button (not needed on the first page, but function handles it)
add_back_and_logout_button()

# Run the modules page
modules_page()
