import streamlit as st
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from helpers import add_back_and_logout_button
from streamlit_extras.switch_page_button import switch_page
import os
from pymongo import MongoClient
import re


# Set up the Streamlit page configuration
st.set_page_config(page_title="Course Creation",initial_sidebar_state="collapsed")

st.markdown(
    """
<style>
    [data-testid="collapsedControl"] {
        display: none
    }
</style>
""",
    unsafe_allow_html=True,
)

def get_database():
    client = MongoClient(**st.secrets["mongo"])
    return client['course_copilot_db']

db = get_database()
modules_collection = db['course_modules']
gemini_modules_collection = db['gemini_modules'] 

def gemini(course, api_key):
    llm = ChatGoogleGenerativeAI(model='gemini-pro', api_key=api_key)
    prompt = PromptTemplate.from_template("""You are a course creator copilot. You are given a {course}, suggest some modules with sub topics that need to be taught in it. IT SHOULD BE IN FOLLOWING FORMAT STRICTLY, DO NOT CHANGE OR ADD ANYTHING:
                                          **Module 1: Introduction to Python**
                                            - What is Python?
                                            - Installing Python
                                            - Basic Python syntax
                                            - Variables and data types

                                            **Module 2: Control Flow**
                                            - Conditional statements (if, else, elif)
                                            - Loops (for, while)
                                            - Functions

                                            **Module 3: Data Structures**
                                            - Lists
                                            - Tuples
                                            - Dictionaries
                                            - Sets""")
    chain = prompt | llm
    response = chain.invoke(input=course)
    return response.content


def parse_modules(modules_string):
    """
    Parses the modules string generated by Gemini API into a dictionary.
    Expected format:
    **Module 1: Module Name**
    - Subtopic 1
    - Subtopic 2
    ...
    """
    modules = {}
    module_pattern = re.compile(r'\*\*(?:Module\s*\d*:)?\s*(.+?)\*\*')
    topic_pattern = re.compile(r'-\s*(.+)')
    
    module_matches = module_pattern.findall(modules_string)
    for module_name in module_matches:
        # Find the start and end positions of each module's topics
        start = modules_string.find(module_name) + len(module_name) + 4  # Adjust for '**' and possible 'Module X: '
        end = modules_string.find('**', start)
        if end == -1:
            end = len(modules_string)
        topics_string = modules_string[start:end].strip()
        topics = topic_pattern.findall(topics_string)
        modules[module_name.strip()] = topics
    
    return modules


def course_idea_page():
    st.title("Course Creation")
    st.info("If you have already created modules please proceed to next page")

    tab1, tab2 = st.tabs(["Automatic Generation", "Manual Creation"])

    with tab1:
        st.header("Generate Through Gemini")
        course_idea = st.text_area("Enter your course idea here:", height=50)

        if st.button("Generate Modules"):
            if not course_idea.strip():
                st.error("Please enter a course idea.")
            else:
                modules_string = gemini(course_idea, st.session_state['google_api_key'])
                st.session_state['COURSE_MODULES'] = modules_string
                st.success("Modules generated successfully!")

                # Parse generated modules and store in database
                modules = parse_modules(modules_string)
                st.write("Generated Modules:", modules_string)

                user_id = st.session_state['user_id']
                
                for module_name, subtopics in modules.items():
                    # Insert each module into the Gemini modules collection
                    gemini_modules_collection.update_one(
                        {"user_id": user_id, "module_name": module_name},  # Search by user_id and module_name
                        {"$setOnInsert": {"module_name": module_name, "subtopics": []}},  # Create if not exists
                        upsert=True
                    )
                    # Store subtopics in the database
                    gemini_modules_collection.update_one(
                        {"user_id": user_id, "module_name": module_name},
                        {"$addToSet": {"subtopics": {"$each": subtopics}}},  # Add subtopics if they are not already present
                    )
    
    with tab2:
        st.header("Create Modules On Your Own")

        if 'modules' not in st.session_state:
            st.session_state['modules'] = {}

            
        module_name = st.text_input('Module Name')

        # Input for subtopics
        subtopics_input = st.text_area('Subtopics (separate by commas)', '')

        # Add module and subtopics to session state
        if st.button('Add Module'):
            if module_name and subtopics_input:
                subtopics = [sub.strip() for sub in subtopics_input.split(',')]  # Parse subtopics
                
                # Check if the module already exists
                if module_name in st.session_state['modules']:
                    # Append new subtopics to existing ones, avoiding duplicates
                    existing_subtopics = set(st.session_state['modules'][module_name])
                    new_subtopics = set(subtopics)
                    st.session_state['modules'][module_name] = list(existing_subtopics.union(new_subtopics))
                else:
                    # Add new module with its subtopics
                    st.session_state['modules'][module_name] = subtopics
                
                st.success(f'Module "{module_name}" updated!')
                # Store the module in the MongoDB collection
                user_id = st.session_state['user_id']
                modules_collection.update_one(
                    {"user_id": user_id, "module_name": module_name},  # Search by user_id and module_name
                    {"$addToSet": {"subtopics": {"$each": subtopics}}},  # Upsert the subtopics
                    upsert=True  # Create a new document if it doesn't exist
                )

        # Display the created modules and subtopics
        if st.session_state['modules']:
            st.subheader('Created Modules')
            for mod, subs in st.session_state['modules'].items():
                st.write(f'**{mod}**')
                for sub in subs:
                    st.write(f'- {sub}')

    if st.button('Next'):
        if 'modules' not in st.session_state and 'COURSE_MODULES' not in st.session_state:
            st.error("Create some Modules to move further...")
        else:
            switch_page("modules_page")

# Manage navigation history
current_page = "course_idea"

if current_page not in st.session_state['page_history']:
    st.session_state['page_history'].append(current_page)


add_back_and_logout_button()

course_idea_page()
